// generated by E:\SQLite\sqlite2cpp.py E:\SQLite\sqlite-test.ddl E:\SQLite\sqlite-test sqlTest
#ifndef SQLTEST_SQLITE_TEST_H
#define SQLTEST_SQLITE_TEST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace sqlRepo
{
  namespace Role_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct RoleName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "role_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roleName;
            T& operator()() { return roleName; }
            const T& operator()() const { return roleName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace Role_

  struct Role: sqlpp::table_t<Role,
               Role_::Id,
               Role_::RoleName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Role";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Role;
        T& operator()() { return Role; }
        const T& operator()() const { return Role; }
      };
    };
  };
  namespace User_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Email
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "email";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T email;
            T& operator()() { return email; }
            const T& operator()() const { return email; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace User_

  struct User: sqlpp::table_t<User,
               User_::Id,
               User_::Name,
               User_::Email>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "User";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T User;
        T& operator()() { return User; }
        const T& operator()() const { return User; }
      };
    };
  };
  namespace UserRoles_
  {
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct RoleId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "RoleId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RoleId;
            T& operator()() { return RoleId; }
            const T& operator()() const { return RoleId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace UserRoles_

  struct UserRoles: sqlpp::table_t<UserRoles,
               UserRoles_::UserId,
               UserRoles_::RoleId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "UserRoles";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T UserRoles;
        T& operator()() { return UserRoles; }
        const T& operator()() const { return UserRoles; }
      };
    };
  };
} // namespace sqlTest
#endif
